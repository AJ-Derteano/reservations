name: Deploy backend to AWS

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
    types: [merged]

jobs:
  create-docker-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to GitHub Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Build Image and push image
        run: |
          docker build . --tag ghcr.io/aj-derteano/reservations-api:latest
          docker push ghcr.io/aj-derteano/reservations-api:latest

  deploy:
    needs: create-docker-image
    runs-on: ubuntu-latest

    env:
      NODE_ENV: ${{ secrets.NODE_ENV }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_SSL: ${{ secrets.DB_SSL }}
      PORT: ${{ secrets.PORT }}
      SALT_ROUNDS: ${{ secrets.SALT_ROUNDS }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRATION_TIME: ${{ secrets.JWT_EXPIRATION_TIME }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      EMAIL_API_HOST: ${{ secrets.EMAIL_API_HOST }}
      EMAIL_API_PORT: ${{ secrets.EMAIL_API_PORT }}
      EMAIL_API_PATH: ${{ secrets.EMAIL_API_PATH }}
      AWS_EC2_USER: ${{ secrets.AWS_EC2_USER }}
      AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
      AWS_EC2_KEY: ${{ secrets.AWS_EC2_KEY }}
      VIRTUAL_HOST: ${{ secrets.VIRTUAL_HOST }}
      VIRTUAL_PORT: ${{ secrets.VIRTUAL_PORT }}
      LETSENCRYPT_HOST: ${{ secrets.LETSENCRYPT_HOST }}
      LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}

    steps:
      - name: Install ssh
        run: sudo apt-get install -y ssh

      - name: SSH into EC2 instance
        run: |
          echo "$AWS_EC2_KEY" > private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${AWS_EC2_USER}@${AWS_EC2_HOST} << OEF
            echo "Conectado al servidor."
            cd deploy/reservationapp/
            echo "Actualizando el repositorio..."
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GIT_TOKEN }}
            docker pull ghcr.io/aj-derteano/reservations-api:latest
            echo "Repositorio actualizado."
            
            echo "Reiniciando el contenedor..."
            docker stop ghcr.io/aj-derteano/reservations-api && docker rm ghcr.io/aj-derteano/reservations-api
            echo "Contenedor reiniciado."

            echo "Iniciando el contenedor..."
            docker compose up --build -d

            echo "Eliminando imÃ¡genes no utilizadas..."
            docker image prune -f
          OEF
